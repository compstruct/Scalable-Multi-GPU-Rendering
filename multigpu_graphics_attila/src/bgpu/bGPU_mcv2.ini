#
#
# bGPU Simulator
#
# Configuration File
#
# 30/11/2004
#

[SIMULATOR]

InputFile = "gltrace-sphere"
SimCycles = 10000
SimFrames = 1
SignalDumpFile = "signaltrace.txt"
StatsFile = "stats.csv"
StartFrame = 0
StartSignalDump = 0
SignalDumpCycles = 10000
StatisticsRate = 10000
DumpSignalTrace = FALSE
Statistics = FALSE 
PerCycleStatistics = TRUE 
PerFrameStatistics = FALSE 
PerBatchStatistics = FALSE
GenerateFragmentMap = FALSE
#
#  Latency map modes
#
#  0 : latency of the fragment since it was generated until it was written into the
#      color buffer.
#  1 : overdraw mode
#  2 : latency of the fragment since it was generated until it was written into the
#      color buffer.
#  3 : latency of the fragment inside the shader unit
#
FragmentMapMode = 3
DoubleBuffer = FALSE
ForceMSAA = FALSE
MSAASamples = 4
ForceFP16ColorBuffer = FALSE
ObjectSize0 = 512
BucketSize0 = 131072
ObjectSize1 = 4096
BucketSize1 = 32768
ObjectSize2 = 64
BucketSize2 = 65536
UseACD = FALSE

[GPU]

NumVertexShaders = 8
NumFragmentShaders = 4
NumStampPipes = 4

[COMMANDPROCESSOR]
PipelinedBatchRendering = FALSE


[MEMORYCONTROLLER]

# Enable new memory controller V2 (false to use legacy memory controller)
MemoryControllerV2 = TRUE 
MemorySize = 268435456
MemoryClockMultiplier = 1
MemoryFrequency = 1
MemoryBusWidth = 64
MemoryBuses = 4
SharedBanks = FALSE
BankGranurality = 1024
BurstLength = 16
ReadLatency = 10
WriteLatency = 5
WriteToReadLatency = 5
MemoryPageSize = 4096
OpenPages = 8
PageOpenLatency = 13
MaxConsecutiveReads = 16
MaxConsecutiveWrites = 16
CommandProcessorBusWidth = 8
StreamerFetchBusWidth = 64
StreamerLoaderBusWidth = 64
ZStencilBusWidth = 64
ColorWriteBusWidth = 64
DACBusWidth = 64
TextureUnitBusWidth = 64
MappedMemorySize = 16777216
ReadBufferLines = 32
WriteBufferLines = 64
RequestQueueSize = 128
ServiceQueueSize = 32


# Parameters only for Memory Controller V2
V2MemoryChannels = 4
V2BanksPerMemoryChannel = 8
V2MemoryRowSize = 4096
# 'V2BurstElementsPerCycle' defines the 32-bit elements coming out/in per cycle
# from/to the memory data pins. In DDR memories it is usually set to 2
# This parameter can be also used to simulate wider interfaces (ie 2 32-bit chips
# per channel) if used in conjunction with V2MemoryRowSize
V2BurstElementsPerCycle = 4
# 'V2SplitterType' selects the MemoryTrasaction splitter utilized by MCv2
# Splitter 0 utilizes V2(Second)ChannelInterleaving & V2(Second)BankInterleaving
# Splitter 1 utilizes masks to select channel & bank, that is:
# V2(Second)ChannelInterleavingMask and V2(Second)BankInterleavingMask
V2SplitterType = 0
V2ChannelInterleaving = 1024
V2BankInterleaving = 1024
V2ChannelInterleavingMask = "10 9 8"
V2BankInterleavingMask = "13 12 11"
# 'V2SecondInterleaving' flag allows to define a second memory space in the
# GPU memory using a different channel/bank splitting
# If you enable this flag you must define V2Second* parameters properly
V2SecondInterleaving = FALSE
V2SecondChannelInterleaving = 0
V2SecondBankInterleaving = 0
V2SecondChannelInterleavingMask = ""
V2SecondBankInterleavingMask = ""
# 'V2BankSelectionPolicy' defines the criteria used to select from ready banks
# in schedulers supporting mutiple ready queues per bank (V2ChannelScheduler = 2 or 3)
# Look for possible values with file BankSelectionPolicy.h/cpp
V2BankSelectionPolicy = "OLDEST_FIRST"
# 0=fifo, 1=rwfifo, 2=fifoperbank, 3=rwfifoperbank
V2ChannelScheduler = 0
# The page policy that will be used by the selected scheduler: 0 = close, 1 = open
V2PagePolicy = 0
# Define the queue size used by the scheduler(s)
V2MaxChannelTransactions = 16
# Enable this flag to generate a trace with all requests to the MC
V2MemoryTrace = FALSE

# Params to control schedulers with one or more queues per bank
V2DisableActiveManager = FALSE
V2DisablePrechargeManager = FALSE
V2ManagerSelectionAlgorithm = 0

# Defines the memory type used by MCV2. Only "gddr3" supported for now
V2MemoryType="gddr3"
#########################################
# Parameters specific for GGDRX memories #
#########################################
# V2GDDR_Profile can be set to "custom", "600" (resembles a 600MHZ Hynix GDDR3 memory) or "perfect" (to set all delays to 0)
V2GDDR_Profile="600"
# Define V2GDDR_Profile as "custom" to configure each GDDR parameter separately (below)
# This param defines the minimum delay between two ACT commands to different banks
V2GDDR_tRRD=9
# This param defines the RAS to CAS latency, or what it is the same minimum latency required to send a READ/WRITE after and ACT
V2GDDR_tRCD=13
# This param defines the Write to Read penalty
V2GDDR_tWTR=5
# This param defines the Read to Write penalty
V2GDDR_tRTW=2
# This param defines the Write to Precharge (aka Write Recovery time)
V2GDDR_tWR=10
# This param defines the Read to Precharge penalty
V2GDDR_tRP=14
# This param defines the CAS latency (the cycles between a registration of the READ command and the first data coming out)
V2GDDR_CAS=10
# This param defines the Write latency (the cycles between a registration of the WRITE command and the first data coming in)
V2GDDR_WL=5


[STREAMER]

IndicesCycle = 2
IndexBufferSize = 2048
OutputFIFOSize = 512
OutputMemorySize = 512
VerticesCycle = 2
AttributesSentCycle = 4
StreamerLoaderUnits = 1
#
# Individual Streamer Loader Unit parameters
#
SLIndicesCycle = 2
SLInputRequestQueueSize = 128
SLAttributesCycle = 8
SLInputCacheLines = 32
SLInputCacheLineSize = 256
SLInputCachePortWidth = 16
SLInputCacheRequestQueueSize = 8
SLInputCacheInputQueueSize = 8


[VERTEXSHADER]

ExecutableThreads = 12
InputBuffers = 4
ThreadResources = 128
ThreadRate = 1
FetchRate = 1
ThreadGroup = 1
LockedExecutionMode = FALSE
#
#  Enabling the scalar ALU requires FetchRate to be 2.
#
ScalarALU = FALSE
ThreadWindow = TRUE
FetchDelay = 0
SwapOnBlock = FALSE
InputsPerCycle = 1
OutputsPerCycle = 1
OutputLatency = 11


[PRIMITIVEASSEMBLY]

VerticesCycle = 2
TrianglesCycle = 2
InputBusLatency = 10
AssemblyQueueSize = 32


[CLIPPER]

TrianglesCycle = 2
ClipperUnits = 2
StartLatency = 1
ExecLatency = 6
ClipBufferSize = 32


[RASTERIZER]

TrianglesCycle = 2
SetupFIFOSize = 32
SetupUnits = 2
SetupLatency = 10
SetupStartLatency = 4
TriangleInputLatency = 2
TriangleOutputLatency = 2
TriangleSetupOnShader = FALSE
TriangleShaderQueueSize = 8
StampsPerCycle = 4
MSAASamplesCycle = 2
OverScanWidth = 4
OverScanHeight = 4
ScanWidth = 16
ScanHeight = 16
GenWidth = 8
GenHeight = 8
RasterizationBatchSize = 4
BatchQueueSize = 16
RecursiveMode = TRUE
DisableHZ = FALSE
StampsPerHZBlock = 16
HierarchicalZBufferSize = 262144
HZCacheLines = 8
HZCacheLineSize = 16
EarlyZQueueSize = 256
HZAccessLatency =  5
HZUpdateLatency =  4
HZBlocksClearedPerCycle = 256
NumInterpolators = 4
ShaderInputQueueSize = 128
ShaderOutputQueueSize = 128
ShaderInputBatchSize = 64
TiledShaderDistribution = TRUE
#
#  This two parameters are only for the unified shader version.
#
VertexInputQueueSize = 32
ShadedVertexQueueSize = 512
TriangleInputQueueSize = 32
TriangleOutputQueueSize = 32

GeneratedStampQueueSize = 256
EarlyZTestedStampQueueSize = 32
InterpolatedStampQueueSize = 16
ShadedStampQueueSize = 640
EmulatorStoredTriangles = 64
#
# Micropolygon Rasterizer parameters
#
# if FALSE then uses the classic rasterizer unit
UseMicroPolygonRasterizer = FALSE
TriangleBoundOutputLatency = 2
TriangleBoundOpLatency = 2
LargeTriangleFIFOSize = 16
MicroTriangleFIFOSize = 8
BypassStampFIFOSize = 256
MicroTriangleBypass = FALSE
#
# Options are:
#        0: Bypass 1-pixel covering triangles only,
#        1: Bypass 1-pixel and 1-stamp covering triangles,
#        2: Bypass any triangle covering up to 4-stamps.
#
BypassMode = 0
DumpTriangleBurstSizeHistogram = FALSE

[FRAGMENTSHADER]

ExecutableThreads = 2048
InputBuffers = 16
ThreadResources = 8192
ThreadRate = 4
FetchRate = 2
ThreadGroup = 16
LockedExecutionMode = TRUE

#
# Vector Shader parameters.
#
VectorShader = FALSE
VectorThreads = 128
VectorResources = 512
VectorALUWidth = 4
VectorFetchRate = 2
VectorLength = 16

#
#  Enabling the scalar ALU requires FetchRate to be 2.
#
ScalarALU = TRUE
ThreadWindow = TRUE
FetchDelay = 4
SwapOnBlock = FALSE
InputsPerCycle = 4
OutputsPerCycle = 4
OutputLatency = 11
TextureUnits = 1
TextureRequestRate = 1
TextureRequestGroup = 64
AddressALULatency = 6
FilterALULatency = 4

TextureBlockDimension = 2
TextureSuperBlockDimension = 4
TextureRequestQueueSize = 512
TextureAccessQueue = 256
TextureResultQueue = 4
TextureWaitReadWindow = 32
TwoLevelTextureCache = TRUE
TextureCacheLineSize = 64
TextureCacheWays = 8
TextureCacheLines = 8
TextureCachePortWidth = 4
TextureCacheRequestQueueSize = 32
TextureCacheInputQueue = 32
TextureCacheMissesPerCycle = 8
TextureCacheDecompressLatency = 1
TextureCacheLineSizeL1 = 64
TextureCacheWaysL1 = 16
TextureCacheLinesL1 = 16
TextureCacheInputQueueL1 = 32


[ZSTENCILTEST]

StampsPerCycle = 1
BytesPerPixel = 4
DisableCompression = FALSE
ZCacheWays = 4
ZCacheLines = 16
ZCacheStampsPerLine = 16
ZCachePortWidth = 32
ZCacheExtraReadPort = TRUE
ZCacheExtraWritePort = TRUE
ZCacheRequestQueueSize = 8
ZCacheInputQueueSize = 8
ZCacheOutputQueueSize = 8
BlockStateMemorySize = 262144
BlocksClearedPerCycle = 1024
CompressionUnitLatency = 8
DecompressionUnitLatency = 8
ZQueueSize = 64
ZALUTestRate = 1
ZALULatency = 2

[COLORWRITE]

StampsPerCycle = 1
BytesPerPixel = 4
DisableCompression = FALSE
ColorCacheWays = 4
ColorCacheLines = 16
ColorCacheStampsPerLine = 16
ColorCachePortWidth = 32
ColorCacheExtraReadPort = TRUE
ColorCacheExtraWritePort = TRUE
ColorCacheRequestQueueSize = 8
ColorCacheInputQueueSize = 8
ColorCacheOutputQueueSize = 8
BlockStateMemorySize = 262144
BlocksClearedPerCycle = 1024
CompressionUnitLatency = 8
DecompressionUnitLatency = 8
ColorQueueSize = 64
BlendALURate = 1
BlendALULatency = 2

[DAC]

BytesPerPixel = 4
BlockSize = 256
BlockUpdateLatency = 1
BlocksUpdatedPerCycle = 1024
BlockRequestQueueSize = 32
#
# While we use the DAC just to dump the frame after each swap
# we can dismiss the real decompression latency to speed up the
# dumping.
#
#DecompressionUnitLatency = 8
DecompressionUnitLatency = 1
RefreshRate = 5000000
SynchedRefresh = TRUE
RefreshFrame = TRUE


[SIGNALS]

#
#  CommandProcessor signals.
#

StreamerControl = 1:1
StreamerState = 1:1
CommShaderCommand = 1:1
PrimitiveAssemblyCommand = 1:1
PrimitiveAssembblyCommandState = 1:1
ClipperCommand = 1:1
ClipperCommandState = 1:1
RasterizerCommand = 1:1
RasterizerState = 1:1


#
#  MemoryController Signals
#

CommProcMemoryRead = 2:1
CommProcMemoryWrite = 2:1
StreamerLoaderMemoryData = 2:1
StreamerLoaderMemoryRequest = 1:1
StreamerFetchMemoryData = 2:1
StreamerFetchMemoryRequest = 1:1
MemoryModule = 1:1


#
#  Streamer Signals
#

StreamerFetchCommand = 1:1
StreamerFetchState = 1:1
StreamerOutputCacheCommand = 1:1
StreamerLoaderCommand = 1:1
StreamerCommitCommand = 1:1
StreamerCommitState = 1:1
StreamerOutputCache = 1:1
StreamerOCUpdate = 1:1
StreamerLoaderNewIndex = 1:1
StreamerCommitNewIndex = 1:1
StreamerCommitDeAlloc = 2:1
StreamerCommitDeAllocOC = 1:1


#
#  Shader Signals
#

ShaderCommand = 1:1
ShaderState = 1:1
ConsumerState = 1:1
ShaderOutput = 1:1
ShaderInstruction = 1:1
ShaderNewPC = 2:1
ShaderDecodeState = 1:1
ShaderExecution = 2:9


#
#  PrimitiveAssembly Signals
#

PrimitiveAssemblyInput = 1:10
PrimitiveAssemblyRequest = 1:1


#
#  Clipper Signals
#

ClipperInput = 1:1
ClipperState = 1:1
ClipperExecution = 1:6


#
#  Rasterizer Signals
#

TriangleSetupCommand = 1:1
TriangleSetupRasterizerState = 1:1
TriangleSetupNewTriangle = 1:2
TriangleSetupState = 1:1
TriangleSetup = 1:8
TriangleSetupOutput = 1:2
TriangleSetupRequest = 1:1
TriangleTraversalCommand = 1:1
TriangleTraversalState = 1:1
InterpolatorCommand = 1:1
InterpolatorRasterizerState = 1:1
InterpolatorNewFragment = 4:1
InterpolatorState = 1:1
Interpolation = 4:8
FFIFORasterizerCommand = 1:1
FFIFORasterizerState = 1:1
FragmentFIFO = 4:1
FragmentFIFOState = 1:1


