<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<configuration>
  <parser>
    <files basepath="">
      <file>d3d9.h</file>
      <file>d3d9caps.h</file>
      <file>d3d9types.h</file>
    </files>
    <enums>
      <include>D3DDEVTYPE</include>
      <include>D3DFORMAT</include>
      <include>D3DSWAPEFFECT</include>
      <include>D3DMULTISAMPLE_TYPE</include>
      <include>D3DRESOURCETYPE</include>
      <include>D3DRENDERSTATETYPE</include>
      <include>D3DPOOL</include>
      <include>D3DQUERYTYPE</include>
      <include>D3DTRANSFORMSTATETYPE</include>
      <include>D3DPRIMITIVETYPE</include>
      <include>D3DSAMPLERSTATETYPE</include>
      <include>D3DTEXTURESTAGESTATETYPE</include>
      <include>D3DBACKBUFFER_TYPE</include>
      <include>D3DSTATEBLOCKTYPE</include>
      <include>D3DTEXTUREFILTERTYPE</include>
      <include>D3DCUBEMAP_FACES</include>
      <exclude />
    </enums>
    <structs>
      <include>D3DPRESENT_PARAMETERS</include>
      <include>D3DVIEWPORT9</include>
      <exclude>D3DMATRIX</exclude>
    </structs>
    <classes>
      <include>IDirect3D9</include>
      <include>IDirect3DDevice9</include>
      <include>IDirect3DVertexDeclaration9</include>
      <include>IDirect3DVertexBuffer9</include>
      <include>IDirect3DIndexBuffer9</include>
      <include>IDirect3DTexture9</include>
      <include>IDirect3DCubeTexture9</include>
      <include>IDirect3DVolume9</include>
      <include>IDirect3DVolumeTexture9</include>
      <include>IDirect3DSurface9</include>
      <include>IDirect3DStateBlock9</include>
      <include>IDirect3DPixelShader9</include>
      <include>IDirect3DVertexShader9</include>
      <include>IDirect3DQuery9</include>
      <include>IDirect3DSwapChain9</include>
      <exclude />
    </classes>
    <macros>
      <macro>
        <left>DECLARE_INTERFACE_(iface, baseiface)</left>
        <right>interface iface</right>
      </macro>
      <macro>
        <left>STDMETHOD(method)</left>
        <right>HRESULT method</right>
      </macro>
      <macro>
        <left>STDMETHOD_(type,method)</left>
        <right>type method</right>
      </macro>
      <macro>
        <left>PURE</left>
        <right></right>
      </macro>
      <macro>
        <left>THIS_</left>
        <right></right>
      </macro>
      <macro>
        <left>THIS</left>
        <right>void</right>
      </macro>
    </macros>
  </parser>

  <generator outputpath="..\dxautogen\">
    <types>

      <!-- Basic Types -->
      <type name="HRESULT"  savein="callstack" usemethod="Push_HRESULT"  passby="value" />
      <type name="HMONITOR" savein="callstack" usemethod="Push_HMONITOR" passby="value" />
      <type name="BYTE"     savein="callstack" usemethod="Push_BYTE"     passby="value" />
      <type name="WORD"     savein="callstack" usemethod="Push_WORD"     passby="value" />
      <type name="DWORD"    savein="callstack" usemethod="Push_DWORD"    passby="value" />
      <type name="INT"      savein="callstack" usemethod="Push_INT"      passby="value" />
      <type name="UINT"     savein="callstack" usemethod="Push_UINT"     passby="value" />
      <type name="ULONG"    savein="callstack" usemethod="Push_ULONG"    passby="value" />
      <type name="BOOL"     savein="callstack" usemethod="Push_BOOL"     passby="value" />
      <type name="int"      savein="callstack" usemethod="Push_int"      passby="value" />
      <type name="HWND"     savein="callstack" usemethod="Push_HWND"     passby="value" />
      <type name="float"    savein="callstack" usemethod="Push_float"    passby="value" />
      <type name="D3DCOLOR" savein="callstack" usemethod="Push_D3DCOLOR" passby="value" />
      <type name="UINT*"    savein="callstack" usemethod="Push_UINT"     passby="value" />
      <type name="BOOL*"    savein="callstack" usemethod="Push_BOOL"     passby="value" />
      <type name="DWORD*"   savein="callstack" usemethod="Push_DWORD"    passby="value" />

      <!-- Enum Types -->
      <type name="D3DFORMAT"                savein="callstack" usemethod="Push_D3DFORMAT"                passby="value" />
      <type name="D3DDEVTYPE"               savein="callstack" usemethod="Push_D3DDEVTYPE"               passby="value" />
      <type name="D3DSWAPEFFECT"            savein="callstack" usemethod="Push_D3DSWAPEFFECT"            passby="value" />
      <type name="D3DMULTISAMPLE_TYPE"      savein="callstack" usemethod="Push_D3DMULTISAMPLE_TYPE"      passby="value" />
      <type name="D3DRESOURCETYPE"          savein="callstack" usemethod="Push_D3DRESOURCETYPE"          passby="value" />
      <type name="D3DRENDERSTATETYPE"       savein="callstack" usemethod="Push_D3DRENDERSTATETYPE"       passby="value" />
      <type name="D3DPOOL"                  savein="callstack" usemethod="Push_D3DPOOL"                  passby="value" />
      <type name="D3DQUERYTYPE"             savein="callstack" usemethod="Push_D3DQUERYTYPE"             passby="value" />
      <type name="D3DTRANSFORMSTATETYPE"    savein="callstack" usemethod="Push_D3DTRANSFORMSTATETYPE"    passby="value" />
      <type name="D3DPRIMITIVETYPE"         savein="callstack" usemethod="Push_D3DPRIMITIVETYPE"         passby="value" />
      <type name="D3DSAMPLERSTATETYPE"      savein="callstack" usemethod="Push_D3DSAMPLERSTATETYPE"      passby="value" />
      <type name="D3DTEXTURESTAGESTATETYPE" savein="callstack" usemethod="Push_D3DTEXTURESTAGESTATETYPE" passby="value" />
      <type name="D3DBACKBUFFER_TYPE"       savein="callstack" usemethod="Push_D3DBACKBUFFER_TYPE"       passby="value" />
      <type name="D3DSTATEBLOCKTYPE"        savein="callstack" usemethod="Push_D3DSTATEBLOCKTYPE"        passby="value" />
      <type name="D3DTEXTUREFILTERTYPE"     savein="callstack" usemethod="Push_D3DTEXTUREFILTERTYPE"     passby="value" />
      <type name="D3DCUBEMAP_FACES"         savein="callstack" usemethod="Push_D3DCUBEMAP_FACES"         passby="value" />

      <!-- Struct Types (string serializable structs) -->
      <type name="REFIID"                savein="callstack" usemethod="Push_IID"            passby="reference" />
      <type name="REFGUID"               savein="callstack" usemethod="Push_IID"            passby="reference" />
      <type name="CONST RECT*"           savein="callstack" usemethod="Push_RECT"           passby="reference" />
      <type name="CONST POINT*"          savein="callstack" usemethod="Push_POINT"          passby="reference" />
      <type name="CONST D3DBOX*"         savein="callstack" usemethod="Push_D3DBOX"         passby="reference" />
      <type name="CONST D3DCLIPSTATUS9*" savein="callstack" usemethod="Push_D3DCLIPSTATUS9" passby="reference" />

      <!-- Buffer Types (no string serializable structs) -->
      <type name="D3DPRESENT_PARAMETERS*" savein="buffer" usemethod="Push_D3DPRESENT_PARAMETERS" passby="value" />
      <type name="CONST D3DLIGHT9*"       savein="buffer" usemethod="Push_D3DLIGHT9"             passby="value" />
      <type name="CONST D3DMATRIX*"       savein="buffer" usemethod="Push_D3DMATRIX"             passby="value" />
      <type name="CONST D3DMATERIAL9*"    savein="buffer" usemethod="Push_D3DMATERIAL9"          passby="value" />
      <type name="CONST D3DVIEWPORT9*"    savein="buffer" usemethod="Push_D3DVIEWPORT9"          passby="value" />
      <type name="CONST D3DGAMMARAMP*"    savein="buffer" usemethod="Push_D3DGAMMARAMP"          passby="value" />

      <!-- Buffer Types (dynamic size) -->
      <type name="CONST D3DVERTEXELEMENT9*"           savein="buffer" usemethod="Push_ARR_D3DVERTEXELEMENT9"              passby="value" />
      <type name="CONST RGNDATA*"                     savein="buffer" usemethod="Push_ARR_RGNDATA"                        passby="value" />
      <type name="CONST D3DRECT*"                     savein="buffer" usemethod="Push_ARR_D3DRECT"                        passby="value" />
      <type name="ARR_DRAWPRIMITIVEUP"                savein="buffer" usemethod="Push_ARR_DRAWPRIMITIVEUP"                passby="value" />
      <type name="ARR_DRAWINDEXEDPRIMITIVEUPINDICES"  savein="buffer" usemethod="Push_ARR_DRAWINDEXEDPRIMITIVEUPINDICES"  passby="value" />
      <type name="ARR_DRAWINDEXEDPRIMITIVEUPVERTICES" savein="buffer" usemethod="Push_ARR_DRAWINDEXEDPRIMITIVEUPVERTICES" passby="value" />
      <type name="ARR_SHADERFUNCTIONTOKEN"            savein="buffer" usemethod="Push_ARR_SHADERFUNCTIONTOKEN"            passby="value" />
      <type name="ARR_SHADERCONSTANTBOOL"             savein="buffer" usemethod="Push_ARR_SHADERCONSTANTBOOL"             passby="value" />
      <type name="ARR_SHADERCONSTANTFLOAT"            savein="buffer" usemethod="Push_ARR_SHADERCONSTANTFLOAT"            passby="value" />
      <type name="ARR_SHADERCONSTANTINT"              savein="buffer" usemethod="Push_ARR_SHADERCONSTANTINT"              passby="value" />
      <type name="ARR_SETCLIPLANE"                    savein="buffer" usemethod="Push_ARR_SETCLIPPLANE"                   passby="value" />
      <type name="ARR_PALETTEENTRY"                   savein="buffer" usemethod="Push_ARR_PALETTEENTRY"                   passby="value" />
      <type name="DXRawData"                          savein="buffer" usemethod="Push_DXRawData"                          passby="value" />

      <!-- Library Internal Types -->
      <type name="DXFlagsD3DLOCK"        savein="callstack" usemethod="Push_DXFlagsD3DLOCK"        passby="value" />
      <type name="DXFlagsD3DCREATE"      savein="callstack" usemethod="Push_DXFlagsD3DCREATE"      passby="value" />
      <type name="DXFlagsD3DCLEAR"       savein="callstack" usemethod="Push_DXFlagsD3DCLEAR"       passby="value" />
      <type name="DXFlagsD3DFVF"         savein="callstack" usemethod="Push_DXFlagsD3DFVF"         passby="value" />
      <type name="DXFlagsD3DUSAGE"       savein="callstack" usemethod="Push_DXFlagsD3DUSAGE"       passby="value" />
      <type name="DXFlagsD3DSGR"         savein="callstack" usemethod="Push_DXFlagsD3DSGR"         passby="value" />
      <type name="DXFlagsD3DISSUE"       savein="callstack" usemethod="Push_DXFlagsD3DISSUE"       passby="value" />
      <type name="DXFlagsD3DENUM"        savein="callstack" usemethod="Push_DXFlagsD3DENUM"        passby="value" />
      <type name="DXFlagsD3DPRESENT"     savein="callstack" usemethod="Push_DXFlagsD3DPRESENT"     passby="value" />
      <type name="DXFlagsD3DPRESENTFLAG" savein="callstack" usemethod="Push_DXFlagsD3DPRESENTFLAG" passby="value" />

    </types>

    <structs>
      <struct name="D3DPRESENT_PARAMETERS">
        <field name="Flags" policy="changesavetype">DXFlagsD3DPRESENTFLAG</field>
        <field name="PresentationInterval" policy="changesavetype">DXFlagsD3DPRESENT</field>
      </struct>
    </structs>

    <classes wrappersuffix="InterceptorWrapper" wrapperbaseclass="DXInterceptorWrapper" stubsuffix="InterceptorStub" stubbaseclass="DXInterceptorStub">

      <!-- ***************************************************************** -->

      <class name="IDirect3D9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3D9*</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3D9*</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3D9InterceptorWrapper" public="true">IDirect3D9InterceptorWrapper(REFIID iid, IDirect3D9* original)</method>
            <method name="~IDirect3D9InterceptorWrapper" public="true">virtual ~IDirect3D9InterceptorWrapper()</method>
          </wrapper>
          <stub>
            <method name="IDirect3D9InterceptorStub" public="true">IDirect3D9InterceptorStub(DXPainter* painter, IDirect3D9* original)</method>
            <method name="~IDirect3D9InterceptorStub" public="true">virtual ~IDirect3D9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="RegisterSoftwareDevice">
            <param position="1" policy="nocapture" />
            <specific policy="replaceboth">RegisterSoftwareDevice_Specific</specific>
          </method>
          <method name="GetAdapterIdentifier">
            <param position="2" policy="changesavetype">DXFlagsD3DENUM</param>
            <param position="3" policy="nocapture" />
          </method>
          <method name="EnumAdapterModes">
            <param position="4" policy="nocapture" />
          </method>
          <method name="GetAdapterDisplayMode">
            <param position="2" policy="nocapture" />
          </method>
          <method name="CheckDeviceMultiSampleType">
            <param position="6" policy="nocapture" />
          </method>
          <method name="GetDeviceCaps">
            <param position="3" policy="nocapture" />
          </method>
          <method name="CreateDevice">
            <param position="4" policy="changesavetype">DXFlagsD3DCREATE</param>
            <param position="6" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateDevice_Specific</specific>
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DDevice9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DDevice9*</attrib>
            <attrib name="m_creator">IDirect3D9InterceptorWrapper*</attrib>
            <attrib name="m_banner">DXInterceptorBanner*</attrib>
            <attrib name="m_deviceReferenceCount">unsigned int</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DDevice9*</attrib>
            <attrib name="m_creator">IDirect3D9InterceptorStub*</attrib>
            <attrib name="m_deviceReferenceCount">unsigned int</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DDevice9IntercetorWrapper" public="true">IDirect3DDevice9InterceptorWrapper(REFIID iid, IDirect3DDevice9* original, IDirect3D9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DDevice9IntercetorWrapper" public="true">virtual ~IDirect3DDevice9InterceptorWrapper()</method>
            <method name="Banner_Create" public="true">void Banner_Create()</method>
            <method name="Banner_Destroy" public="true">void Banner_Destroy()</method>
            <method name="Banner_Draw" public="true">void Banner_Draw()</method>
            <method name="Banner_DrawError" public="true">void Banner_DrawError(const char* cadena, unsigned int timeout = 5000)</method>
            <method name="FreeDeviceSurfaces" public="false">void FreeDeviceSurfaces()</method>
          </wrapper>
          <stub>
            <method name="IDirect3DDevice9IntercetorStub" public="true">IDirect3DDevice9InterceptorStub(DXPainter* painter, IDirect3DDevice9* original, IDirect3D9InterceptorStub* creator)</method>
            <method name="~IDirect3DDevice9IntercetorStub" public="true">virtual ~IDirect3DDevice9InterceptorStub()</method>
            <method name="FreeDeviceSurfaces" public="false">void FreeDeviceSurfaces()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replaceboth">AddRef_Specific</specific>
          </method>
          <method name="Release">
            <specific policy="replaceboth">Release_Specific</specific>
          </method>
          <method name="GetDirect3D">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDirect3D_Specific</specific>
          </method>
          <method name="Reset">
            <specific policy="replaceboth">Reset_Specific</specific>
          </method>
          <method name="SetViewport">
            <specific policy="replacewrapperonly">SetViewport_Specific</specific>
          </method>
          <method name="Present">
            <specific policy="replaceboth">Present_Specific</specific>
          </method>
          <method name="GetDeviceCaps">
            <param position="1" policy="nocapture" />
          </method>
          <method name="GetDisplayMode">
            <param position="2" policy="nocapture" />
          </method>
          <method name="CreateQuery">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateQuery_Specific</specific>
          </method>
          <method name="GetCreationParameters">
            <param position="1" policy="nocapture" />
          </method>
          <method name="GetBackBuffer">
            <param position="4" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetBackBuffer_Specific</specific>
          </method>
          <method name="GetFVF">
            <param position="1" policy="nocapture" />
          </method>
          <method name="SetFVF">
            <param position="1" policy="changesavetype">DXFlagsD3DFVF</param>
          </method>
          <method name="GetClipStatus">
            <param position="1" policy="nocapture" />
          </method>
          <method name="GetRasterStatus">
            <param position="2" policy="nocapture" />
          </method>
          <method name="GetGammaRamp">
            <param position="2" policy="nocapture" />
          </method>
          <method name="SetGammaRamp">
            <param position="2" policy="changesavetype">DXFlagsD3DSGR</param>
          </method>
          <method name="SetClipPlane">
            <param position="2" policy="changesavetype">ARR_SETCLIPLANE</param>
          </method>
          <method name="ValidateDevice">
            <param position="1" policy="nocapture" />
          </method>
          <method name="GetRenderState">
            <param position="2" policy="nocapture" />
          </method>
          <method name="GetTransform">
            <param position="2" policy="nocapture" />
          </method>
          <method name="DrawPrimitiveUP">
            <param position="3" policy="changesavetype,helpparams" params="1,2,4">ARR_DRAWPRIMITIVEUP</param>
          </method>
          <method name="DrawIndexedPrimitiveUP">
            <param position="5" policy="changesavetype,helpparams" params="1,4,6">ARR_DRAWINDEXEDPRIMITIVEUPINDICES</param>
            <param position="7" policy="changesavetype,helpparams" params="2,3,8">ARR_DRAWINDEXEDPRIMITIVEUPVERTICES</param>
          </method>
          <method name="Clear">
            <param position="2" policy="helpparams" params="1" />
            <param position="3" policy="changesavetype">DXFlagsD3DCLEAR</param>
          </method>
          <method name="GetFrontBufferData">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetFrontBufferData_Specific</specific>
          </method>
          <method name="GetMaterial">
            <param position="1" policy="nocapture" />
          </method>
          <method name="GetLight">
            <param position="2" policy="nocapture" />
          </method>
          <method name="GetClipPlane">
            <param position="2" policy="nocapture" />
          </method>
          <method name="CreateVertexDeclaration">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateVertexDeclaration_Specific</specific>
          </method>
          <method name="GetPaletteEntries">
            <param position="2" policy="nocapture" />
          </method>
          <method name="SetPaletteEntries">
            <param position="2" policy="changesavetype">ARR_PALETTEENTRY</param>
          </method>
          <method name="GetScissorRect">
            <param position="1" policy="nocapture" />
          </method>
          <method name="CreateVertexBuffer">
            <param position="2" policy="changesavetype">DXFlagsD3DUSAGE</param>
            <param position="3" policy="changesavetype">DXFlagsD3DFVF</param>
            <param position="5" policy="savespecific" />
            <param position="6" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateVertexBuffer_Specific</specific>
          </method>
          <method name="CreateIndexBuffer">
            <param position="2" policy="changesavetype">DXFlagsD3DUSAGE</param>
            <param position="5" policy="savespecific" />
            <param position="6" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateIndexBuffer_Specific</specific>
          </method>
          <method name="CreateTexture">
            <param position="7" policy="savespecific" />
            <param position="8" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateTexture_Specific</specific>
          </method>
          <method name="CreateCubeTexture">
            <param position="6" policy="savespecific" />
            <param position="7" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateCubeTexture_Specific</specific>
          </method>
          <method name="CreateVolumeTexture">
            <param position="8" policy="savespecific" />
            <param position="9" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateVolumeTexture_Specific</specific>
          </method>
          <method name="CreateDepthStencilSurface">
            <param position="7" policy="savespecific" />
            <param position="8" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateDepthStencilSurface_Specific</specific>
          </method>
          <method name="CreateOffscreenPlainSurface">
            <param position="5" policy="savespecific" />
            <param position="6" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateOffscreenPlainSurface_Specific</specific>
          </method>
          <method name="CreateRenderTarget">
            <param position="7" policy="savespecific" />
            <param position="8" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateRenderTarget_Specific</specific>
          </method>
          <method name="CreateStateBlock">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateStateBlock_Specific</specific>
          </method>
          <method name="CreatePixelShader">
            <param position="1" policy="changesavetype">ARR_SHADERFUNCTIONTOKEN</param>
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreatePixelShader_Specific</specific>
          </method>
          <method name="CreateVertexShader">
            <param position="1" policy="changesavetype">ARR_SHADERFUNCTIONTOKEN</param>
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateVertexShader_Specific</specific>
          </method>
          <method name="SetCursorProperties">
            <param position="3" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">SetCursorProperties_Specific</specific>
          </method>
          <method name="SetVertexDeclaration">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">SetVertexDeclaration_Specific</specific>
          </method>
          <method name="SetStreamSource">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">SetStreamSource_Specific</specific>
          </method>
          <method name="SetIndices">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">SetIndices_Specific</specific>
          </method>
          <method name="GetTexture">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetTexture_Specific</specific>
          </method>
          <method name="SetTexture">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">SetTexture_Specific</specific>
          </method>
          <method name="ColorFill">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">ColorFill_Specific</specific>
          </method>
          <method name="EndStateBlock">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">EndStateBlock_Specific</specific>
          </method>
          <method name="CreateAdditionalSwapChain">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">CreateAdditionalSwapChain_Specific</specific>
          </method>
          <method name="GetSwapChain">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetSwapChain_Specific</specific>
          </method>
          <method name="GetPixelShader">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetPixelShader_Specific</specific>
          </method>
          <method name="SetPixelShader">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">SetPixelShader_Specific</specific>
          </method>
          <method name="GetVertexShader">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetVertexShader_Specific</specific>
          </method>
          <method name="SetVertexShader">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">SetVertexShader_Specific</specific>
          </method>
          <method name="GetRenderTarget">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetRenderTarget_Specific</specific>
          </method>
          <method name="GetRenderTargetData">
            <param position="1" policy="savespecific" />
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetRenderTargetData_Specific</specific>
          </method>
          <method name="UpdateSurface">
            <param position="1" policy="savespecific" />
            <param position="2" policy="savespecific" />
            <param position="3" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">UpdateSurface_Specific</specific>
          </method>
          <method name="StretchRect">
            <param position="1" policy="savespecific" />
            <param position="2" policy="savespecific" />
            <param position="3" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">StretchRect_Specific</specific>
          </method>
          <method name="UpdateTexture">
            <param position="1" policy="savespecific" />
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">UpdateTexture_Specific</specific>
          </method>
          <method name="SetRenderTarget">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">SetRenderTarget_Specific</specific>
          </method>
          <method name="GetViewport">
            <param position="1" policy="nocapture" />
          </method>
          <method name="GetDepthStencilSurface">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDepthStencilSurface_Specific</specific>
          </method>
          <method name="SetDepthStencilSurface">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">SetDepthStencilSurface_Specific</specific>
          </method>
          <method name="SetPixelShaderConstantB">
            <param position="2" policy="changesavetype,helpparams" params="3">ARR_SHADERCONSTANTBOOL</param>
          </method>
          <method name="SetPixelShaderConstantF">
            <param position="2" policy="changesavetype,helpparams" params="3">ARR_SHADERCONSTANTFLOAT</param>
          </method>
          <method name="SetPixelShaderConstantI">
            <param position="2" policy="changesavetype,helpparams" params="3">ARR_SHADERCONSTANTINT</param>
          </method>
          <method name="SetVertexShaderConstantB">
            <param position="2" policy="changesavetype,helpparams" params="3">ARR_SHADERCONSTANTBOOL</param>
          </method>
          <method name="SetVertexShaderConstantF">
            <param position="2" policy="changesavetype,helpparams" params="3">ARR_SHADERCONSTANTFLOAT</param>
          </method>
          <method name="SetVertexShaderConstantI">
            <param position="2" policy="changesavetype,helpparams" params="3">ARR_SHADERCONSTANTINT</param>
          </method>
          <method name="GetPixelShaderConstantB">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="GetPixelShaderConstantF">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="GetPixelShaderConstantI">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="GetVertexShaderConstantB">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="GetVertexShaderConstantF">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="GetVertexShaderConstantI">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="SetCursorPosition">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DVertexDeclaration9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DVertexDeclaration9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DVertexDeclaration9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DVertexDeclaration9InterceptorWrapper" public="true">IDirect3DVertexDeclaration9InterceptorWrapper(REFIID iid, IDirect3DVertexDeclaration9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DVertexDeclaration9InterceptorWrapper" public="true">virtual ~IDirect3DVertexDeclaration9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
            <method name="GetOriginal" public="true">IDirect3DVertexDeclaration9* GetOriginal()</method>
            <method name="GetInternalResource" public="true">static HRESULT GetInternalResource(IDirect3DVertexDeclaration9** ppRes, DWORD* pIDRes)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DVertexDeclaration9InterceptorStub" public="true">IDirect3DVertexDeclaration9InterceptorStub(DXPainter* painter, IDirect3DVertexDeclaration9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DVertexDeclaration9InterceptorStub" public="true">virtual ~IDirect3DVertexDeclaration9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
          <method name="GetDeclaration">
            <param position="1" policy="nocapture" />
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDeclaration_Specific</specific>
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DVertexBuffer9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DVertexBuffer9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
            <attrib name="m_locks">std::stack&lt;DXBufferLock&gt;</attrib>
            <attrib name="m_shadowBuffer">LPBYTE</attrib>
            <attrib name="m_shadowBufferSize">UINT</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DVertexBuffer9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
            <attrib name="m_locks">std::stack&lt;DXBufferLock&gt;</attrib>
            <attrib name="m_bufferSize">UINT</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DVertexBuffer9InterceptorWrapper" public="true">IDirect3DVertexBuffer9InterceptorWrapper(REFIID iid, IDirect3DVertexBuffer9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DVertexBuffer9InterceptorWrapper" public="true">virtual ~IDirect3DVertexBuffer9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
            <method name="GetOriginal" public="true">IDirect3DVertexBuffer9* GetOriginal()</method>
            <method name="GetInternalResource" public="true">static HRESULT GetInternalResource(IDirect3DVertexBuffer9** ppRes, DWORD* pIDRes)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DVertexBuffer9InterceptorStub" public="true">IDirect3DVertexBuffer9InterceptorStub(DXPainter* painter, IDirect3DVertexBuffer9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DVertexBuffer9InterceptorStub" public="true">virtual ~IDirect3DVertexBuffer9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
          <method name="Lock">
            <param position="2" policy="savespecific" />
            <param position="3" policy="nocapture" />
            <param position="4" policy="changesavetype">DXFlagsD3DLOCK</param>
            <specific policy="replaceboth" passcallsaver="true">Lock_Specific</specific>
          </method>
          <method name="Unlock">
            <specific policy="replaceboth" passcallsaver="true">Unlock_Specific</specific>
          </method>
          <method name="GetDesc">
            <param position="1" policy="nocapture" />
          </method>
          <method name="GetPrivateData">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="SetPrivateData">
            <param position="2" policy="changesavetype,helpparams" params="3">DXRawData</param>
            <specific policy="replacestubonly" />
          </method>
          <method name="FreePrivateData">
            <specific policy="replacestubonly" />
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DIndexBuffer9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DIndexBuffer9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
            <attrib name="m_locks">std::stack&lt;DXBufferLock&gt;</attrib>
            <attrib name="m_shadowBuffer">LPBYTE</attrib>
            <attrib name="m_shadowBufferSize">UINT</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DIndexBuffer9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
            <attrib name="m_locks">std::stack&lt;DXBufferLock&gt;</attrib>
            <attrib name="m_bufferSize">UINT</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DIndexBuffer9InterceptorWrapper" public="true">IDirect3DIndexBuffer9InterceptorWrapper(REFIID iid, IDirect3DIndexBuffer9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DIndexBuffer9InterceptorWrapper" public="true">virtual ~IDirect3DIndexBuffer9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
            <method name="GetOriginal" public="true">IDirect3DIndexBuffer9* GetOriginal()</method>
            <method name="GetInternalResource" public="true">static HRESULT GetInternalResource(IDirect3DIndexBuffer9** ppRes, DWORD* pIDRes)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DIndexBuffer9InterceptorStub" public="true">IDirect3DIndexBuffer9InterceptorStub(DXPainter* painter, IDirect3DIndexBuffer9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DIndexBuffer9InterceptorStub" public="true">virtual ~IDirect3DIndexBuffer9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
          <method name="Lock">
            <param position="2" policy="savespecific" />
            <param position="3" policy="nocapture" />
            <param position="4" policy="changesavetype">DXFlagsD3DLOCK</param>
            <specific policy="replaceboth" passcallsaver="true">Lock_Specific</specific>
          </method>
          <method name="Unlock">
            <specific policy="replaceboth" passcallsaver="true">Unlock_Specific</specific>
          </method>
          <method name="GetDesc">
            <param position="1" policy="nocapture" />
          </method>
          <method name="GetPrivateData">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="SetPrivateData">
            <param position="2" policy="changesavetype,helpparams" params="3">DXRawData</param>
            <specific policy="replacestubonly" />
          </method>
          <method name="FreePrivateData">
            <specific policy="replacestubonly" />
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DTexture9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DTexture9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
            <attrib name="m_locks">DXSurfaceLock*</attrib>
            <attrib name="m_format">D3DFORMAT</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DTexture9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
            <attrib name="m_locks">DXSurfaceLock*</attrib>
            <attrib name="m_format">D3DFORMAT</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DTexture9InterceptorWrapper" public="true">IDirect3DTexture9InterceptorWrapper(REFIID iid, IDirect3DTexture9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DTexture9InterceptorWrapper" public="true">virtual ~IDirect3DTexture9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
            <method name="GetOriginal" public="true">IDirect3DTexture9* GetOriginal()</method>
            <method name="GetInternalResource" public="true">static HRESULT GetInternalResource(IDirect3DBaseTexture9** ppRes, DWORD* pIDRes)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DTexture9InterceptorStub" public="true">IDirect3DTexture9InterceptorStub(DXPainter* painter, IDirect3DTexture9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DTexture9InterceptorStub" public="true">virtual ~IDirect3DTexture9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
          <method name="GetLevelDesc">
            <param position="2" policy="nocapture" />
          </method>
          <method name="GetSurfaceLevel">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetSurfaceLevel_Specific</specific>
          </method>
          <method name="LockRect">
            <param position="2" policy="nocapture" />
            <param position="4" policy="changesavetype">DXFlagsD3DLOCK</param>
            <specific policy="replaceboth">LockRect_Specific</specific>
          </method>
          <method name="UnlockRect">
            <specific policy="replaceboth" passcallsaver="true">UnlockRect_Specific</specific>
          </method>
          <method name="GetPrivateData">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="SetPrivateData">
            <param position="2" policy="changesavetype,helpparams" params="3">DXRawData</param>
            <specific policy="replacestubonly" />
          </method>
          <method name="FreePrivateData">
            <specific policy="replacestubonly" />
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DCubeTexture9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DCubeTexture9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
            <attrib name="m_locks">DXCubeMapLock*</attrib>
            <attrib name="m_format">D3DFORMAT</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DCubeTexture9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
            <attrib name="m_locks">DXCubeMapLock*</attrib>
            <attrib name="m_format">D3DFORMAT</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DCubeTexture9InterceptorWrapper" public="true">IDirect3DCubeTexture9InterceptorWrapper(REFIID iid, IDirect3DCubeTexture9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DCubeTexture9InterceptorWrapper" public="true">virtual ~IDirect3DCubeTexture9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
            <method name="GetOriginal" public="true">IDirect3DCubeTexture9* GetOriginal()</method>
            <method name="GetInternalResource" public="true">static HRESULT GetInternalResource(IDirect3DCubeTexture9** ppRes, DWORD* pIDRes)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DCubeTexture9InterceptorStub" public="true">IDirect3DCubeTexture9InterceptorStub(DXPainter* painter, IDirect3DCubeTexture9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DCubeTexture9InterceptorStub" public="true">virtual ~IDirect3DCubeTexture9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
          <method name="GetLevelDesc">
            <param position="2" policy="nocapture" />
          </method>
          <method name="GetCubeMapSurface">
            <param position="3" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetCubeMapSurface_Specific</specific>
          </method>
          <method name="LockRect">
            <param position="3" policy="nocapture" />
            <param position="5" policy="changesavetype">DXFlagsD3DLOCK</param>
            <specific policy="replaceboth">LockRect_Specific</specific>
          </method>
          <method name="UnlockRect">
            <specific policy="replaceboth" passcallsaver="true">UnlockRect_Specific</specific>
          </method>
          <method name="GetPrivateData">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="SetPrivateData">
            <param position="2" policy="changesavetype,helpparams" params="3">DXRawData</param>
            <specific policy="replacestubonly" />
          </method>
          <method name="FreePrivateData">
            <specific policy="replacestubonly" />
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DSurface9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DSurface9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
            <attrib name="m_lock">DXSurfaceLock</attrib>
            <attrib name="m_format">D3DFORMAT</attrib>
            <attrib name="m_level">UINT</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DSurface9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
            <attrib name="m_lock">DXSurfaceLock</attrib>
            <attrib name="m_format">D3DFORMAT</attrib>
            <attrib name="m_level">UINT</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DSurface9InterceptorWrapper" public="true">IDirect3DSurface9InterceptorWrapper(REFIID iid, UINT level, IDirect3DSurface9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DSurface9InterceptorWrapper" public="true">virtual ~IDirect3DSurface9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
            <method name="GetOriginal" public="true">IDirect3DSurface9* GetOriginal()</method>
            <method name="GetInternalResource" public="true">static HRESULT GetInternalResource(IDirect3DSurface9** ppRes, DWORD* pIDRes)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DSurface9InterceptorStub" public="true">IDirect3DSurface9InterceptorStub(DXPainter* painter, UINT level, IDirect3DSurface9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DSurface9InterceptorStub" public="true">virtual ~IDirect3DSurface9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
          <method name="GetDesc">
            <param position="1" policy="nocapture" />
          </method>
          <method name="LockRect">
            <param position="1" policy="nocapture" />
            <param position="3" policy="changesavetype">DXFlagsD3DLOCK</param>
            <specific policy="replaceboth">LockRect_Specific</specific>
          </method>
          <method name="UnlockRect">
            <specific policy="replaceboth" passcallsaver="true">UnlockRect_Specific</specific>
          </method>
          <method name="GetPrivateData">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="SetPrivateData">
            <param position="2" policy="changesavetype,helpparams" params="3">DXRawData</param>
            <specific policy="replacestubonly" />
          </method>
          <method name="FreePrivateData">
            <specific policy="replacestubonly" />
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DStateBlock9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DStateBlock9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DStateBlock9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DStateBlock9InterceptorWrapper" public="true">IDirect3DStateBlock9InterceptorWrapper(REFIID iid, IDirect3DStateBlock9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DStateBlock9InterceptorWrapper" public="true">virtual ~IDirect3DStateBlock9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DStateBlock9InterceptorStub" public="true">IDirect3DStateBlock9InterceptorStub(DXPainter* painter, IDirect3DStateBlock9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DStateBlock9InterceptorStub" public="true">virtual ~IDirect3DStateBlock9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DPixelShader9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DPixelShader9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DPixelShader9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DPixelShader9InterceptorWrapper" public="true">IDirect3DPixelShader9InterceptorWrapper(REFIID iid, IDirect3DPixelShader9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DPixelShader9InterceptorWrapper" public="true">virtual ~IDirect3DPixelShader9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
            <method name="GetOriginal" public="true">IDirect3DPixelShader9* GetOriginal()</method>
            <method name="GetInternalResource" public="true">static HRESULT GetInternalResource(IDirect3DPixelShader9** ppRes, DWORD* pIDRes)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DPixelShader9InterceptorStub" public="true">IDirect3DPixelShader9InterceptorStub(DXPainter* painter, IDirect3DPixelShader9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DPixelShader9InterceptorStub" public="true">virtual ~IDirect3DPixelShader9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
          <method name="GetFunction">
            <param position="1" policy="nocapture" />
            <param position="2" policy="nocapture" />
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DVertexShader9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DVertexShader9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DVertexShader9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DVertexShader9InterceptorWrapper" public="true">IDirect3DVertexShader9InterceptorWrapper(REFIID iid, IDirect3DVertexShader9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DVertexShader9InterceptorWrapper" public="true">virtual ~IDirect3DVertexShader9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
            <method name="GetOriginal" public="true">IDirect3DVertexShader9* GetOriginal()</method>
            <method name="GetInternalResource" public="true">static HRESULT GetInternalResource(IDirect3DVertexShader9** ppRes, DWORD* pIDRes)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DVertexVertex9InterceptorStub" public="true">IDirect3DVertexShader9InterceptorStub(DXPainter* painter, IDirect3DVertexShader9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DVertexVertex9InterceptorStub" public="true">virtual ~IDirect3DVertexShader9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
          <method name="GetFunction">
            <param position="1" policy="nocapture" />
            <param position="2" policy="nocapture" />
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DVolume9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DVolume9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
            <attrib name="m_lock">DXVolumeLock*</attrib>
            <attrib name="m_format">D3DFORMAT</attrib>
            <attrib name="m_level">UINT</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DVolume9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
            <attrib name="m_lock">DXVolumeLock*</attrib>
            <attrib name="m_format">D3DFORMAT</attrib>
            <attrib name="m_level">UINT</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DVolume9InterceptorWrapper" public="true">IDirect3DVolume9InterceptorWrapper(REFIID iid, UINT level, IDirect3DVolume9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DVolume9InterceptorWrapper" public="true">virtual ~IDirect3DVolume9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DVolume9InterceptorStub" public="true">IDirect3DVolume9InterceptorStub(DXPainter* painter, UINT level, IDirect3DVolume9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DVolume9InterceptorStub" public="true">virtual ~IDirect3DVolume9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
          <method name="GetDesc">
            <param position="1" policy="nocapture" />
          </method>
          <method name="LockBox">
            <param position="1" policy="nocapture" />
            <param position="3" policy="changesavetype">DXFlagsD3DLOCK</param>
            <specific policy="replaceboth">LockBox_Specific</specific>
          </method>
          <method name="UnlockBox">
            <specific policy="replaceboth" passcallsaver="true">UnlockBox_Specific</specific>
          </method>
          <method name="GetPrivateData">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="SetPrivateData">
            <param position="2" policy="changesavetype,helpparams" params="3">DXRawData</param>
            <specific policy="replacestubonly" />
          </method>
          <method name="FreePrivateData">
            <specific policy="replacestubonly" />
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DVolumeTexture9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DVolumeTexture9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
            <attrib name="m_locks">DXVolumeLock*</attrib>
            <attrib name="m_format">D3DFORMAT</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DVolumeTexture9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
            <attrib name="m_locks">DXVolumeLock*</attrib>
            <attrib name="m_format">D3DFORMAT</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DVolumeTexture9InterceptorWrapper" public="true">IDirect3DVolumeTexture9InterceptorWrapper(REFIID iid, IDirect3DVolumeTexture9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DVolumeTexture9InterceptorWrapper" public="true">virtual ~IDirect3DVolumeTexture9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
            <method name="GetOriginal" public="true">IDirect3DVolumeTexture9* GetOriginal()</method>
            <method name="GetInternalResource" public="true">static HRESULT GetInternalResource(IDirect3DVolumeTexture9** ppRes, DWORD* pIDRes)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DVolumeTexture9InterceptorStub" public="true">IDirect3DVolumeTexture9InterceptorStub(DXPainter* painter, IDirect3DVolumeTexture9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DVolumeTexture9InterceptorStub" public="true">virtual ~IDirect3DVolumeTexture9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
          <method name="GetLevelDesc">
            <param position="2" policy="nocapture" />
          </method>
          <method name="GetVolumeLevel">
            <param position="2" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetVolumeLevel_Specific</specific>
          </method>
          <method name="LockBox">
            <param position="2" policy="nocapture" />
            <param position="4" policy="changesavetype">DXFlagsD3DLOCK</param>
            <specific policy="replaceboth">LockBox_Specific</specific>
          </method>
          <method name="UnlockBox">
            <specific policy="replaceboth" passcallsaver="true">UnlockBox_Specific</specific>
          </method>
          <method name="GetPrivateData">
            <param position="2" policy="nocapture" />
            <specific policy="replacestubonly" />
          </method>
          <method name="SetPrivateData">
            <param position="2" policy="changesavetype,helpparams" params="3">DXRawData</param>
            <specific policy="replacestubonly" />
          </method>
          <method name="FreePrivateData">
            <specific policy="replacestubonly" />
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DQuery9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DQuery9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DQuery9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DQuery9InterceptorWrapper" public="true">IDirect3DQuery9InterceptorWrapper(REFIID iid, IDirect3DQuery9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DQuery9InterceptorWrapper" public="true">virtual ~IDirect3DQuery9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DQuery9InterceptorStub" public="true">IDirect3DQuery9InterceptorStub(DXPainter* painter, IDirect3DQuery9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DQuery9InterceptorStub" public="true">virtual ~IDirect3DQuery9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
          <method name="GetData">
            <param position="1" policy="changesavetype,helpparams" params="2">DXRawData</param>
          </method>
          <method name="Issue">
            <param position="1" policy="changesavetype">DXFlagsD3DISSUE</param>
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

      <class name="IDirect3DSwapChain9">
        <attribs_add>
          <wrapper>
            <attrib name="m_original">IDirect3DSwapChain9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorWrapper*</attrib>
          </wrapper>
          <stub>
            <attrib name="m_original">IDirect3DSwapChain9*</attrib>
            <attrib name="m_creator">IDirect3DDevice9InterceptorStub*</attrib>
          </stub>
        </attribs_add>

        <methods_add>
          <wrapper>
            <method name="IDirect3DSwapChain9InterceptorWrapper" public="true">IDirect3DSwapChain9InterceptorWrapper(REFIID iid, IDirect3DSwapChain9* original, IDirect3DDevice9InterceptorWrapper* creator)</method>
            <method name="~IDirect3DSwapChain9InterceptorWrapper" public="true">virtual ~IDirect3DSwapChain9InterceptorWrapper()</method>
            <method name="QueryInterfaceSilent" public="true">HRESULT QueryInterfaceSilent(REFIID riid, void** ppvObj)</method>
          </wrapper>
          <stub>
            <method name="IDirect3DSwapChain9InterceptorStub" public="true">IDirect3DSwapChain9InterceptorStub(DXPainter* painter, IDirect3DSwapChain9* original, IDirect3DDevice9InterceptorStub* creator)</method>
            <method name="~IDirect3DSwapChain9InterceptorStub" public="true">virtual ~IDirect3DSwapChain9InterceptorStub()</method>
          </stub>
        </methods_add>

        <methods>
          <method name="QueryInterface">
            <param position="2" policy="nocapture" />
            <specific policy="replaceboth">QueryInterface_Specific</specific>
          </method>
          <method name="AddRef">
            <specific policy="replacestubonly" />
          </method>
          <method name="Release">
            <specific policy="replacestubonly" />
          </method>
          <method name="GetDevice">
            <param position="1" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetDevice_Specific</specific>
          </method>
          <method name="GetDisplayMode">
            <param position="1" policy="nocapture" />
          </method>
          <method name="GetRasterStatus">
            <param position="1" policy="nocapture" />
          </method>
          <method name="GetBackBuffer">
            <param position="3" policy="savespecific" />
            <specific policy="replaceboth" passcallsaver="true">GetBackBuffer_Specific</specific>
          </method>
          <method name="Present">
            <param position="5" policy="changesavetype">DXFlagsD3DPRESENT</param>
            <specific policy="replaceboth">Present_Specific</specific>
          </method>
        </methods>
      </class>

      <!-- ***************************************************************** -->

    </classes>
  </generator>
</configuration>
